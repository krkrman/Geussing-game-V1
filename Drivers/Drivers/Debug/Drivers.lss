
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  000012ec  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000e2  008000e2  00001402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029ac  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb4  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b1  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000079c  00000000  00000000  0000670c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001013  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002198  00000000  00000000  00007ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000a053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_1>
       8:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_2>
       c:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_7>
      20:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_8>
      24:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__vector_9>
      28:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_10>
      2c:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
      8a:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_voidInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "BUTTON_interface.h"


void BUTTON_voidInit(Button_t* button){
      92:	fc 01       	movw	r30, r24
	if (button->buttonConnection == INTERNAL_PULL_UP)
      94:	82 81       	ldd	r24, Z+2	; 0x02
      96:	82 30       	cpi	r24, 0x02	; 2
      98:	31 f4       	brne	.+12     	; 0xa6 <BUTTON_voidInit+0x14>
	{
		DIO_voidSetPinDirection(button->pin , button->port , INPUT_PULL_UP);
      9a:	42 e0       	ldi	r20, 0x02	; 2
      9c:	61 81       	ldd	r22, Z+1	; 0x01
      9e:	80 81       	ld	r24, Z
      a0:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
      a4:	08 95       	ret
	}else {
		DIO_voidSetPinDirection(button->pin  , button->port , INPUT);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	61 81       	ldd	r22, Z+1	; 0x01
      aa:	80 81       	ld	r24, Z
      ac:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
      b0:	08 95       	ret

000000b2 <BUTTON_u8isPressed>:
	}
}
u8 BUTTON_u8isPressed(Button_t* button){
      b2:	fc 01       	movw	r30, r24
	if (button->buttonConnection == PULL_DOWN)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	31 f4       	brne	.+12     	; 0xc6 <BUTTON_u8isPressed+0x14>
	{
		return DIO_u8GetPinValue(button->pin  , button->port);
      ba:	61 81       	ldd	r22, Z+1	; 0x01
      bc:	80 81       	ld	r24, Z
      be:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>
      c2:	98 2f       	mov	r25, r24
      c4:	07 c0       	rjmp	.+14     	; 0xd4 <BUTTON_u8isPressed+0x22>
	} else {
		return !DIO_u8GetPinValue(button->pin  , button->port);
      c6:	61 81       	ldd	r22, Z+1	; 0x01
      c8:	80 81       	ld	r24, Z
      ca:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	81 11       	cpse	r24, r1
      d2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
      d4:	89 2f       	mov	r24, r25
      d6:	08 95       	ret

000000d8 <LCD_voidSendChar>:
	u8 address;
	if (y_position < 2 && x_position < 16)
	{
		address = (y_position * 0x40) + x_position;
		SET_BIT(address , 7);
		LCD_voidSendCommand(address);
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	41 e0       	ldi	r20, 0x01	; 1
      de:	63 e0       	ldi	r22, 0x03	; 3
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	63 e0       	ldi	r22, 0x03	; 3
      ea:	86 e0       	ldi	r24, 0x06	; 6
      ec:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
      f0:	c4 fb       	bst	r28, 4
      f2:	44 27       	eor	r20, r20
      f4:	40 f9       	bld	r20, 0
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	84 e0       	ldi	r24, 0x04	; 4
      fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
      fe:	c5 fb       	bst	r28, 5
     100:	44 27       	eor	r20, r20
     102:	40 f9       	bld	r20, 0
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	85 e0       	ldi	r24, 0x05	; 5
     108:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     10c:	c6 fb       	bst	r28, 6
     10e:	44 27       	eor	r20, r20
     110:	40 f9       	bld	r20, 0
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	86 e0       	ldi	r24, 0x06	; 6
     116:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     11a:	4c 2f       	mov	r20, r28
     11c:	44 1f       	adc	r20, r20
     11e:	44 27       	eor	r20, r20
     120:	44 1f       	adc	r20, r20
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	87 e0       	ldi	r24, 0x07	; 7
     126:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     12a:	41 e0       	ldi	r20, 0x01	; 1
     12c:	63 e0       	ldi	r22, 0x03	; 3
     12e:	87 e0       	ldi	r24, 0x07	; 7
     130:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     134:	83 ef       	ldi	r24, 0xF3	; 243
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_voidSendChar+0x60>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_voidSendChar+0x66>
     13e:	00 00       	nop
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	63 e0       	ldi	r22, 0x03	; 3
     144:	87 e0       	ldi	r24, 0x07	; 7
     146:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     14a:	83 ef       	ldi	r24, 0xF3	; 243
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <LCD_voidSendChar+0x76>
     152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_voidSendChar+0x7c>
     154:	00 00       	nop
     156:	4c 2f       	mov	r20, r28
     158:	41 70       	andi	r20, 0x01	; 1
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	84 e0       	ldi	r24, 0x04	; 4
     15e:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     162:	c1 fb       	bst	r28, 1
     164:	44 27       	eor	r20, r20
     166:	40 f9       	bld	r20, 0
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	85 e0       	ldi	r24, 0x05	; 5
     16c:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     170:	c2 fb       	bst	r28, 2
     172:	44 27       	eor	r20, r20
     174:	40 f9       	bld	r20, 0
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	86 e0       	ldi	r24, 0x06	; 6
     17a:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     17e:	c3 fb       	bst	r28, 3
     180:	44 27       	eor	r20, r20
     182:	40 f9       	bld	r20, 0
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	87 e0       	ldi	r24, 0x07	; 7
     188:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	63 e0       	ldi	r22, 0x03	; 3
     190:	87 e0       	ldi	r24, 0x07	; 7
     192:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     196:	83 ef       	ldi	r24, 0xF3	; 243
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_voidSendChar+0xc2>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_voidSendChar+0xc8>
     1a0:	00 00       	nop
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	87 e0       	ldi	r24, 0x07	; 7
     1a8:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1ac:	83 ef       	ldi	r24, 0xF3	; 243
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_voidSendChar+0xd8>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_voidSendChar+0xde>
     1b6:	00 00       	nop
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <LCD_voidSendCommand>:
     1bc:	cf 93       	push	r28
     1be:	c8 2f       	mov	r28, r24
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	63 e0       	ldi	r22, 0x03	; 3
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	63 e0       	ldi	r22, 0x03	; 3
     1ce:	86 e0       	ldi	r24, 0x06	; 6
     1d0:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1d4:	c4 fb       	bst	r28, 4
     1d6:	44 27       	eor	r20, r20
     1d8:	40 f9       	bld	r20, 0
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1e2:	c5 fb       	bst	r28, 5
     1e4:	44 27       	eor	r20, r20
     1e6:	40 f9       	bld	r20, 0
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	85 e0       	ldi	r24, 0x05	; 5
     1ec:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1f0:	c6 fb       	bst	r28, 6
     1f2:	44 27       	eor	r20, r20
     1f4:	40 f9       	bld	r20, 0
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     1fe:	4c 2f       	mov	r20, r28
     200:	44 1f       	adc	r20, r20
     202:	44 27       	eor	r20, r20
     204:	44 1f       	adc	r20, r20
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	87 e0       	ldi	r24, 0x07	; 7
     20a:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	63 e0       	ldi	r22, 0x03	; 3
     212:	87 e0       	ldi	r24, 0x07	; 7
     214:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     218:	83 ef       	ldi	r24, 0xF3	; 243
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_voidSendCommand+0x60>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_voidSendCommand+0x66>
     222:	00 00       	nop
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	63 e0       	ldi	r22, 0x03	; 3
     228:	87 e0       	ldi	r24, 0x07	; 7
     22a:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LCD_voidSendCommand+0x76>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_voidSendCommand+0x7c>
     238:	00 00       	nop
     23a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     23e:	88 23       	and	r24, r24
     240:	89 f1       	breq	.+98     	; 0x2a4 <LCD_voidSendCommand+0xe8>
     242:	4c 2f       	mov	r20, r28
     244:	41 70       	andi	r20, 0x01	; 1
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     24e:	c1 fb       	bst	r28, 1
     250:	44 27       	eor	r20, r20
     252:	40 f9       	bld	r20, 0
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     25c:	c2 fb       	bst	r28, 2
     25e:	44 27       	eor	r20, r20
     260:	40 f9       	bld	r20, 0
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     26a:	c3 fb       	bst	r28, 3
     26c:	44 27       	eor	r20, r20
     26e:	40 f9       	bld	r20, 0
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	87 e0       	ldi	r24, 0x07	; 7
     274:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	63 e0       	ldi	r22, 0x03	; 3
     27c:	87 e0       	ldi	r24, 0x07	; 7
     27e:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     282:	83 ef       	ldi	r24, 0xF3	; 243
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_voidSendCommand+0xca>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_voidSendCommand+0xd0>
     28c:	00 00       	nop
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	63 e0       	ldi	r22, 0x03	; 3
     292:	87 e0       	ldi	r24, 0x07	; 7
     294:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
     298:	83 ef       	ldi	r24, 0xF3	; 243
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_voidSendCommand+0xe0>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_voidSendCommand+0xe6>
     2a2:	00 00       	nop
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <LCD_voidInit>:
     2a8:	41 e0       	ldi	r20, 0x01	; 1
     2aa:	63 e0       	ldi	r22, 0x03	; 3
     2ac:	85 e0       	ldi	r24, 0x05	; 5
     2ae:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2b2:	41 e0       	ldi	r20, 0x01	; 1
     2b4:	63 e0       	ldi	r22, 0x03	; 3
     2b6:	86 e0       	ldi	r24, 0x06	; 6
     2b8:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	63 e0       	ldi	r22, 0x03	; 3
     2c0:	87 e0       	ldi	r24, 0x07	; 7
     2c2:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	84 e0       	ldi	r24, 0x04	; 4
     2cc:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2d0:	41 e0       	ldi	r20, 0x01	; 1
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	87 e0       	ldi	r24, 0x07	; 7
     2ea:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_voidSetPinDirection>
     2ee:	8f e0       	ldi	r24, 0x0F	; 15
     2f0:	97 e2       	ldi	r25, 0x27	; 39
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_voidInit+0x4a>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_voidInit+0x50>
     2f8:	00 00       	nop
     2fa:	80 e3       	ldi	r24, 0x30	; 48
     2fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     300:	83 ef       	ldi	r24, 0xF3	; 243
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <LCD_voidInit+0x5c>
     308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_voidInit+0x62>
     30a:	00 00       	nop
     30c:	80 e3       	ldi	r24, 0x30	; 48
     30e:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     312:	83 ef       	ldi	r24, 0xF3	; 243
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <LCD_voidInit+0x6e>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_voidInit+0x74>
     31c:	00 00       	nop
     31e:	80 e3       	ldi	r24, 0x30	; 48
     320:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     324:	83 ef       	ldi	r24, 0xF3	; 243
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_voidInit+0x80>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_voidInit+0x86>
     32e:	00 00       	nop
     330:	80 e2       	ldi	r24, 0x20	; 32
     332:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     336:	83 ef       	ldi	r24, 0xF3	; 243
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_voidInit+0x92>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_voidInit+0x98>
     340:	00 00       	nop
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>
     348:	8c e0       	ldi	r24, 0x0C	; 12
     34a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     360:	08 95       	ret

00000362 <LCD_voidSendString>:
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	8c 01       	movw	r16, r24
     36a:	c0 e0       	ldi	r28, 0x00	; 0
     36c:	03 c0       	rjmp	.+6      	; 0x374 <LCD_voidSendString+0x12>
     36e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_voidSendChar>
     372:	cf 5f       	subi	r28, 0xFF	; 255
     374:	f8 01       	movw	r30, r16
     376:	ec 0f       	add	r30, r28
     378:	f1 1d       	adc	r31, r1
     37a:	80 81       	ld	r24, Z
     37c:	81 11       	cpse	r24, r1
     37e:	f7 cf       	rjmp	.-18     	; 0x36e <LCD_voidSendString+0xc>
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <LCD_voidClear>:
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_voidSendCommand>
     394:	08 95       	ret

00000396 <LCD_voidSendNumber>:
	}
}

void LCD_voidSendNumber(f32 floatNumber , u8 numbersAfterPoint)
{
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	e2 97       	sbiw	r28, 0x32	; 50
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	24 2f       	mov	r18, r20
	char c[50]; //size of the number
	UTILITY_f32ToString(c , floatNumber , numbersAfterPoint);
     3ac:	ab 01       	movw	r20, r22
     3ae:	bc 01       	movw	r22, r24
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	0e 94 40 06 	call	0xc80	; 0xc80 <UTILITY_f32ToString>
	LCD_voidSendString(c);
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
}
     3c0:	e2 96       	adiw	r28, 0x32	; 50
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <showResult>:
	u8 map[4][4] = {{'7','8','9','/'},
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'c','0','=','+'}};
	keyPad->map = map;
}
     3d2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <TIMER1_voidStop>
     3d6:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_voidClear>
     3da:	84 e6       	ldi	r24, 0x64	; 100
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     3e2:	60 91 e4 00 	lds	r22, 0x00E4	; 0x8000e4 <counter>
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 92 07 	call	0xf24	; 0xf24 <__floatunsisf>
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_voidSendNumber>
     3f6:	2f e7       	ldi	r18, 0x7F	; 127
     3f8:	8a e1       	ldi	r24, 0x1A	; 26
     3fa:	96 e0       	ldi	r25, 0x06	; 6
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	90 40       	sbci	r25, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <showResult+0x2a>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_voidClear>
     40c:	84 e7       	ldi	r24, 0x74	; 116
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     414:	60 91 e3 00 	lds	r22, 0x00E3	; 0x8000e3 <randomNumber>
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 92 07 	call	0xf24	; 0xf24 <__floatunsisf>
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_voidSendNumber>
     428:	2f e7       	ldi	r18, 0x7F	; 127
     42a:	8a e1       	ldi	r24, 0x1A	; 26
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	80 40       	sbci	r24, 0x00	; 0
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_voidClear>
     43e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <counter>
     442:	81 11       	cpse	r24, r1
     444:	05 c0       	rjmp	.+10     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     44e:	14 c0       	rjmp	.+40     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     450:	80 31       	cpi	r24, 0x10	; 16
     452:	28 f0       	brcs	.+10     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     454:	88 e9       	ldi	r24, 0x98	; 152
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     45c:	0d c0       	rjmp	.+26     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     45e:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <randomNumber>
     462:	89 13       	cpse	r24, r25
     464:	05 c0       	rjmp	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     466:	8c ea       	ldi	r24, 0xAC	; 172
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     470:	84 eb       	ldi	r24, 0xB4	; 180
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     478:	2f e7       	ldi	r18, 0x7F	; 127
     47a:	8a e1       	ldi	r24, 0x1A	; 26
     47c:	96 e0       	ldi	r25, 0x06	; 6
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	80 40       	sbci	r24, 0x00	; 0
     482:	90 40       	sbci	r25, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     488:	00 00       	nop
     48a:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_voidClear>
     48e:	8d eb       	ldi	r24, 0xBD	; 189
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
     496:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <counter>
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <UTILITY_generateRandomNumber>
     4a2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <randomNumber>
     4a6:	0e 94 74 05 	call	0xae8	; 0xae8 <TIMER1_voidStart>
     4aa:	08 95       	ret

000004ac <main>:
	randomNumber = UTILITY_generateRandomNumber(1 , 15);
	TIMER1_voidStart();
}

int main(void)
{ 	
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <main+0x6>
     4b2:	1f 92       	push	r1
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	randomNumber = UTILITY_generateRandomNumber(1 , 15);
     4b8:	6f e0       	ldi	r22, 0x0F	; 15
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <UTILITY_generateRandomNumber>
     4c0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <randomNumber>
	LCD_voidInit();
     4c4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_voidInit>
	LCD_voidSendString("Guess a number");
     4c8:	83 ed       	ldi	r24, 0xD3	; 211
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_voidSendString>
	Button_t counterButton = {.pin = 1 , .port = PORTA , .buttonConnection = PULL_DOWN};
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	1a 82       	std	Y+2, r1	; 0x02
     4d6:	8b 83       	std	Y+3, r24	; 0x03
	BUTTON_voidInit(&counterButton);
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_voidInit>
	TIMER1_voidInit(PRESCALAR_1024 , MODE_NORMAL , TIMER1_CTC_DIS ,TIMER1_CTC_DIS , 60653);
     4e0:	0d ee       	ldi	r16, 0xED	; 237
     4e2:	1c ee       	ldi	r17, 0xEC	; 236
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	0e 94 29 05 	call	0xa52	; 0xa52 <TIMER1_voidInit>
	// wait for 5 seconds before showing result
	TIMER1_voidEnableInterrupt(TIMER1_INTERRUPT_OVERFLOW);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 84 05 	call	0xb08	; 0xb08 <TIMER1_voidEnableInterrupt>
	TIMER1_voidSetCallBack(TIMER1_INTERRUPT_OVERFLOW , showResult);
     4f6:	69 ee       	ldi	r22, 0xE9	; 233
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	0e 94 97 05 	call	0xb2e	; 0xb2e <TIMER1_voidSetCallBack>
	while(1)
	{
		TIMER1_voidSetCounter(60653);
     500:	8d ee       	ldi	r24, 0xED	; 237
     502:	9c ee       	ldi	r25, 0xEC	; 236
     504:	0e 94 71 05 	call	0xae2	; 0xae2 <TIMER1_voidSetCounter>
		while(!BUTTON_u8isPressed(&counterButton));
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	0e 94 59 00 	call	0xb2	; 0xb2 <BUTTON_u8isPressed>
     510:	88 23       	and	r24, r24
     512:	d1 f3       	breq	.-12     	; 0x508 <main+0x5c>
		if (BUTTON_u8isPressed(&counterButton))
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 59 00 	call	0xb2	; 0xb2 <BUTTON_u8isPressed>
     51c:	88 23       	and	r24, r24
     51e:	81 f3       	breq	.-32     	; 0x500 <main+0x54>
		{
			counter++;
     520:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <counter>
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <counter>
			// to hold the code here till user let the button
			while (BUTTON_u8isPressed(&counterButton));
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 59 00 	call	0xb2	; 0xb2 <BUTTON_u8isPressed>
     532:	81 11       	cpse	r24, r1
     534:	fa cf       	rjmp	.-12     	; 0x52a <main+0x7e>
     536:	e4 cf       	rjmp	.-56     	; 0x500 <main+0x54>

00000538 <DIO_voidSetPinDirection>:
		case PORTC:
		PORTC_REG=Copy_u8Value;
		break;

		case PORTD:
		PORTD_REG=Copy_u8Value;
     538:	61 30       	cpi	r22, 0x01	; 1
     53a:	e1 f1       	breq	.+120    	; 0x5b4 <DIO_voidSetPinDirection+0x7c>
     53c:	38 f0       	brcs	.+14     	; 0x54c <DIO_voidSetPinDirection+0x14>
     53e:	62 30       	cpi	r22, 0x02	; 2
     540:	09 f4       	brne	.+2      	; 0x544 <DIO_voidSetPinDirection+0xc>
     542:	6c c0       	rjmp	.+216    	; 0x61c <DIO_voidSetPinDirection+0xe4>
     544:	63 30       	cpi	r22, 0x03	; 3
     546:	09 f4       	brne	.+2      	; 0x54a <DIO_voidSetPinDirection+0x12>
     548:	9d c0       	rjmp	.+314    	; 0x684 <DIO_voidSetPinDirection+0x14c>
     54a:	08 95       	ret
     54c:	41 30       	cpi	r20, 0x01	; 1
     54e:	69 f4       	brne	.+26     	; 0x56a <DIO_voidSetPinDirection+0x32>
     550:	4a b3       	in	r20, 0x1a	; 26
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	b9 01       	movw	r22, r18
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_voidSetPinDirection+0x26>
     55a:	66 0f       	add	r22, r22
     55c:	77 1f       	adc	r23, r23
     55e:	8a 95       	dec	r24
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_voidSetPinDirection+0x22>
     562:	cb 01       	movw	r24, r22
     564:	84 2b       	or	r24, r20
     566:	8a bb       	out	0x1a, r24	; 26
     568:	08 95       	ret
     56a:	41 11       	cpse	r20, r1
     56c:	0e c0       	rjmp	.+28     	; 0x58a <DIO_voidSetPinDirection+0x52>
     56e:	4a b3       	in	r20, 0x1a	; 26
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	b9 01       	movw	r22, r18
     576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_voidSetPinDirection+0x44>
     578:	66 0f       	add	r22, r22
     57a:	77 1f       	adc	r23, r23
     57c:	8a 95       	dec	r24
     57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_voidSetPinDirection+0x40>
     580:	cb 01       	movw	r24, r22
     582:	80 95       	com	r24
     584:	84 23       	and	r24, r20
     586:	8a bb       	out	0x1a, r24	; 26
     588:	08 95       	ret
     58a:	42 30       	cpi	r20, 0x02	; 2
     58c:	09 f0       	breq	.+2      	; 0x590 <DIO_voidSetPinDirection+0x58>
     58e:	ac c0       	rjmp	.+344    	; 0x6e8 <DIO_voidSetPinDirection+0x1b0>
     590:	4b b3       	in	r20, 0x1b	; 27
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	b9 01       	movw	r22, r18
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_voidSetPinDirection+0x66>
     59a:	66 0f       	add	r22, r22
     59c:	77 1f       	adc	r23, r23
     59e:	8a 95       	dec	r24
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_voidSetPinDirection+0x62>
     5a2:	cb 01       	movw	r24, r22
     5a4:	94 2f       	mov	r25, r20
     5a6:	98 2b       	or	r25, r24
     5a8:	9b bb       	out	0x1b, r25	; 27
     5aa:	9a b3       	in	r25, 0x1a	; 26
     5ac:	80 95       	com	r24
     5ae:	89 23       	and	r24, r25
     5b0:	8a bb       	out	0x1a, r24	; 26
     5b2:	08 95       	ret
     5b4:	41 30       	cpi	r20, 0x01	; 1
     5b6:	69 f4       	brne	.+26     	; 0x5d2 <DIO_voidSetPinDirection+0x9a>
     5b8:	47 b3       	in	r20, 0x17	; 23
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	b9 01       	movw	r22, r18
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_voidSetPinDirection+0x8e>
     5c2:	66 0f       	add	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	8a 95       	dec	r24
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_voidSetPinDirection+0x8a>
     5ca:	cb 01       	movw	r24, r22
     5cc:	84 2b       	or	r24, r20
     5ce:	87 bb       	out	0x17, r24	; 23
     5d0:	08 95       	ret
     5d2:	41 11       	cpse	r20, r1
     5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <DIO_voidSetPinDirection+0xba>
     5d6:	47 b3       	in	r20, 0x17	; 23
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	b9 01       	movw	r22, r18
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_voidSetPinDirection+0xac>
     5e0:	66 0f       	add	r22, r22
     5e2:	77 1f       	adc	r23, r23
     5e4:	8a 95       	dec	r24
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_voidSetPinDirection+0xa8>
     5e8:	cb 01       	movw	r24, r22
     5ea:	80 95       	com	r24
     5ec:	84 23       	and	r24, r20
     5ee:	87 bb       	out	0x17, r24	; 23
     5f0:	08 95       	ret
     5f2:	42 30       	cpi	r20, 0x02	; 2
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <DIO_voidSetPinDirection+0xc0>
     5f6:	78 c0       	rjmp	.+240    	; 0x6e8 <DIO_voidSetPinDirection+0x1b0>
     5f8:	48 b3       	in	r20, 0x18	; 24
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	b9 01       	movw	r22, r18
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_voidSetPinDirection+0xce>
     602:	66 0f       	add	r22, r22
     604:	77 1f       	adc	r23, r23
     606:	8a 95       	dec	r24
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_voidSetPinDirection+0xca>
     60a:	cb 01       	movw	r24, r22
     60c:	94 2f       	mov	r25, r20
     60e:	98 2b       	or	r25, r24
     610:	98 bb       	out	0x18, r25	; 24
     612:	97 b3       	in	r25, 0x17	; 23
     614:	80 95       	com	r24
     616:	89 23       	and	r24, r25
     618:	87 bb       	out	0x17, r24	; 23
     61a:	08 95       	ret
     61c:	41 30       	cpi	r20, 0x01	; 1
     61e:	69 f4       	brne	.+26     	; 0x63a <DIO_voidSetPinDirection+0x102>
     620:	44 b3       	in	r20, 0x14	; 20
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	b9 01       	movw	r22, r18
     628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_voidSetPinDirection+0xf6>
     62a:	66 0f       	add	r22, r22
     62c:	77 1f       	adc	r23, r23
     62e:	8a 95       	dec	r24
     630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_voidSetPinDirection+0xf2>
     632:	cb 01       	movw	r24, r22
     634:	84 2b       	or	r24, r20
     636:	84 bb       	out	0x14, r24	; 20
     638:	08 95       	ret
     63a:	41 11       	cpse	r20, r1
     63c:	0e c0       	rjmp	.+28     	; 0x65a <DIO_voidSetPinDirection+0x122>
     63e:	44 b3       	in	r20, 0x14	; 20
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	b9 01       	movw	r22, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_voidSetPinDirection+0x114>
     648:	66 0f       	add	r22, r22
     64a:	77 1f       	adc	r23, r23
     64c:	8a 95       	dec	r24
     64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_voidSetPinDirection+0x110>
     650:	cb 01       	movw	r24, r22
     652:	80 95       	com	r24
     654:	84 23       	and	r24, r20
     656:	84 bb       	out	0x14, r24	; 20
     658:	08 95       	ret
     65a:	42 30       	cpi	r20, 0x02	; 2
     65c:	09 f0       	breq	.+2      	; 0x660 <DIO_voidSetPinDirection+0x128>
     65e:	44 c0       	rjmp	.+136    	; 0x6e8 <DIO_voidSetPinDirection+0x1b0>
     660:	45 b3       	in	r20, 0x15	; 21
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_voidSetPinDirection+0x136>
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	8a 95       	dec	r24
     670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_voidSetPinDirection+0x132>
     672:	cb 01       	movw	r24, r22
     674:	94 2f       	mov	r25, r20
     676:	98 2b       	or	r25, r24
     678:	95 bb       	out	0x15, r25	; 21
     67a:	94 b3       	in	r25, 0x14	; 20
     67c:	80 95       	com	r24
     67e:	89 23       	and	r24, r25
     680:	84 bb       	out	0x14, r24	; 20
     682:	08 95       	ret
     684:	41 30       	cpi	r20, 0x01	; 1
     686:	69 f4       	brne	.+26     	; 0x6a2 <DIO_voidSetPinDirection+0x16a>
     688:	41 b3       	in	r20, 0x11	; 17
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	b9 01       	movw	r22, r18
     690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_voidSetPinDirection+0x15e>
     692:	66 0f       	add	r22, r22
     694:	77 1f       	adc	r23, r23
     696:	8a 95       	dec	r24
     698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_voidSetPinDirection+0x15a>
     69a:	cb 01       	movw	r24, r22
     69c:	84 2b       	or	r24, r20
     69e:	81 bb       	out	0x11, r24	; 17
     6a0:	08 95       	ret
     6a2:	41 11       	cpse	r20, r1
     6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <DIO_voidSetPinDirection+0x18a>
     6a6:	41 b3       	in	r20, 0x11	; 17
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_voidSetPinDirection+0x17c>
     6b0:	66 0f       	add	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_voidSetPinDirection+0x178>
     6b8:	cb 01       	movw	r24, r22
     6ba:	80 95       	com	r24
     6bc:	84 23       	and	r24, r20
     6be:	81 bb       	out	0x11, r24	; 17
     6c0:	08 95       	ret
     6c2:	42 30       	cpi	r20, 0x02	; 2
     6c4:	89 f4       	brne	.+34     	; 0x6e8 <DIO_voidSetPinDirection+0x1b0>
     6c6:	42 b3       	in	r20, 0x12	; 18
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	b9 01       	movw	r22, r18
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_voidSetPinDirection+0x19c>
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	8a 95       	dec	r24
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_voidSetPinDirection+0x198>
     6d8:	cb 01       	movw	r24, r22
     6da:	94 2f       	mov	r25, r20
     6dc:	98 2b       	or	r25, r24
     6de:	92 bb       	out	0x12, r25	; 18
     6e0:	91 b3       	in	r25, 0x11	; 17
     6e2:	80 95       	com	r24
     6e4:	89 23       	and	r24, r25
     6e6:	81 bb       	out	0x11, r24	; 17
     6e8:	08 95       	ret

000006ea <DIO_voidSetPinValue>:
     6ea:	61 30       	cpi	r22, 0x01	; 1
     6ec:	39 f1       	breq	.+78     	; 0x73c <DIO_voidSetPinValue+0x52>
     6ee:	38 f0       	brcs	.+14     	; 0x6fe <DIO_voidSetPinValue+0x14>
     6f0:	62 30       	cpi	r22, 0x02	; 2
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <DIO_voidSetPinValue+0xc>
     6f4:	42 c0       	rjmp	.+132    	; 0x77a <DIO_voidSetPinValue+0x90>
     6f6:	63 30       	cpi	r22, 0x03	; 3
     6f8:	09 f4       	brne	.+2      	; 0x6fc <DIO_voidSetPinValue+0x12>
     6fa:	5e c0       	rjmp	.+188    	; 0x7b8 <DIO_voidSetPinValue+0xce>
     6fc:	08 95       	ret
     6fe:	41 30       	cpi	r20, 0x01	; 1
     700:	69 f4       	brne	.+26     	; 0x71c <DIO_voidSetPinValue+0x32>
     702:	4b b3       	in	r20, 0x1b	; 27
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	b9 01       	movw	r22, r18
     70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_voidSetPinValue+0x26>
     70c:	66 0f       	add	r22, r22
     70e:	77 1f       	adc	r23, r23
     710:	8a 95       	dec	r24
     712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_voidSetPinValue+0x22>
     714:	cb 01       	movw	r24, r22
     716:	84 2b       	or	r24, r20
     718:	8b bb       	out	0x1b, r24	; 27
     71a:	08 95       	ret
     71c:	41 11       	cpse	r20, r1
     71e:	6a c0       	rjmp	.+212    	; 0x7f4 <DIO_voidSetPinValue+0x10a>
     720:	4b b3       	in	r20, 0x1b	; 27
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	b9 01       	movw	r22, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_voidSetPinValue+0x44>
     72a:	66 0f       	add	r22, r22
     72c:	77 1f       	adc	r23, r23
     72e:	8a 95       	dec	r24
     730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_voidSetPinValue+0x40>
     732:	cb 01       	movw	r24, r22
     734:	80 95       	com	r24
     736:	84 23       	and	r24, r20
     738:	8b bb       	out	0x1b, r24	; 27
     73a:	08 95       	ret
     73c:	41 30       	cpi	r20, 0x01	; 1
     73e:	69 f4       	brne	.+26     	; 0x75a <DIO_voidSetPinValue+0x70>
     740:	48 b3       	in	r20, 0x18	; 24
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	b9 01       	movw	r22, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_voidSetPinValue+0x64>
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	8a 95       	dec	r24
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_voidSetPinValue+0x60>
     752:	cb 01       	movw	r24, r22
     754:	84 2b       	or	r24, r20
     756:	88 bb       	out	0x18, r24	; 24
     758:	08 95       	ret
     75a:	41 11       	cpse	r20, r1
     75c:	4b c0       	rjmp	.+150    	; 0x7f4 <DIO_voidSetPinValue+0x10a>
     75e:	48 b3       	in	r20, 0x18	; 24
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	b9 01       	movw	r22, r18
     766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_voidSetPinValue+0x82>
     768:	66 0f       	add	r22, r22
     76a:	77 1f       	adc	r23, r23
     76c:	8a 95       	dec	r24
     76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_voidSetPinValue+0x7e>
     770:	cb 01       	movw	r24, r22
     772:	80 95       	com	r24
     774:	84 23       	and	r24, r20
     776:	88 bb       	out	0x18, r24	; 24
     778:	08 95       	ret
     77a:	41 30       	cpi	r20, 0x01	; 1
     77c:	69 f4       	brne	.+26     	; 0x798 <DIO_voidSetPinValue+0xae>
     77e:	45 b3       	in	r20, 0x15	; 21
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	b9 01       	movw	r22, r18
     786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_voidSetPinValue+0xa2>
     788:	66 0f       	add	r22, r22
     78a:	77 1f       	adc	r23, r23
     78c:	8a 95       	dec	r24
     78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_voidSetPinValue+0x9e>
     790:	cb 01       	movw	r24, r22
     792:	84 2b       	or	r24, r20
     794:	85 bb       	out	0x15, r24	; 21
     796:	08 95       	ret
     798:	41 11       	cpse	r20, r1
     79a:	2c c0       	rjmp	.+88     	; 0x7f4 <DIO_voidSetPinValue+0x10a>
     79c:	45 b3       	in	r20, 0x15	; 21
     79e:	21 e0       	ldi	r18, 0x01	; 1
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	b9 01       	movw	r22, r18
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_voidSetPinValue+0xc0>
     7a6:	66 0f       	add	r22, r22
     7a8:	77 1f       	adc	r23, r23
     7aa:	8a 95       	dec	r24
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_voidSetPinValue+0xbc>
     7ae:	cb 01       	movw	r24, r22
     7b0:	80 95       	com	r24
     7b2:	84 23       	and	r24, r20
     7b4:	85 bb       	out	0x15, r24	; 21
     7b6:	08 95       	ret
     7b8:	41 30       	cpi	r20, 0x01	; 1
     7ba:	69 f4       	brne	.+26     	; 0x7d6 <DIO_voidSetPinValue+0xec>
     7bc:	42 b3       	in	r20, 0x12	; 18
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	b9 01       	movw	r22, r18
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_voidSetPinValue+0xe0>
     7c6:	66 0f       	add	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	8a 95       	dec	r24
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_voidSetPinValue+0xdc>
     7ce:	cb 01       	movw	r24, r22
     7d0:	84 2b       	or	r24, r20
     7d2:	82 bb       	out	0x12, r24	; 18
     7d4:	08 95       	ret
     7d6:	41 11       	cpse	r20, r1
     7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <DIO_voidSetPinValue+0x10a>
     7da:	42 b3       	in	r20, 0x12	; 18
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	b9 01       	movw	r22, r18
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_voidSetPinValue+0xfe>
     7e4:	66 0f       	add	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	8a 95       	dec	r24
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_voidSetPinValue+0xfa>
     7ec:	cb 01       	movw	r24, r22
     7ee:	80 95       	com	r24
     7f0:	84 23       	and	r24, r20
     7f2:	82 bb       	out	0x12, r24	; 18
     7f4:	08 95       	ret

000007f6 <DIO_u8GetPinValue>:
	}
}

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber, DIO_PORT_t DIO_port)
{
	switch (DIO_port)
     7f6:	61 30       	cpi	r22, 0x01	; 1
     7f8:	89 f0       	breq	.+34     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7fa:	28 f0       	brcs	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fc:	62 30       	cpi	r22, 0x02	; 2
     7fe:	c9 f0       	breq	.+50     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     800:	63 30       	cpi	r22, 0x03	; 3
     802:	11 f1       	breq	.+68     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     804:	2c c0       	rjmp	.+88     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	{
		case PORTA:
		return GET_BIT(PINA_REG , Copy_u8PinNumber);
     806:	29 b3       	in	r18, 0x19	; 25
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	a9 01       	movw	r20, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	55 95       	asr	r21
     810:	47 95       	ror	r20
     812:	8a 95       	dec	r24
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	ca 01       	movw	r24, r20
     818:	81 70       	andi	r24, 0x01	; 1
     81a:	08 95       	ret

		case PORTB:
		return GET_BIT(PINB_REG , Copy_u8PinNumber);
     81c:	26 b3       	in	r18, 0x16	; 22
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     824:	55 95       	asr	r21
     826:	47 95       	ror	r20
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	ca 01       	movw	r24, r20
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	08 95       	ret

		case PORTC:
		return GET_BIT(PINC_REG , Copy_u8PinNumber);
     832:	23 b3       	in	r18, 0x13	; 19
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	a9 01       	movw	r20, r18
     838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     83a:	55 95       	asr	r21
     83c:	47 95       	ror	r20
     83e:	8a 95       	dec	r24
     840:	e2 f7       	brpl	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     842:	ca 01       	movw	r24, r20
     844:	81 70       	andi	r24, 0x01	; 1
     846:	08 95       	ret

		case PORTD:
		return GET_BIT(PIND_REG , Copy_u8PinNumber);
     848:	20 b3       	in	r18, 0x10	; 16
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     850:	55 95       	asr	r21
     852:	47 95       	ror	r20
     854:	8a 95       	dec	r24
     856:	e2 f7       	brpl	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     858:	ca 01       	movw	r24, r20
     85a:	81 70       	andi	r24, 0x01	; 1
     85c:	08 95       	ret

	}
	return 0;  //34an el warning :D
     85e:	80 e0       	ldi	r24, 0x00	; 0
}
     860:	08 95       	ret

00000862 <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
     884:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <EXTI_voidCallBacks>
     888:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <EXTI_voidCallBacks+0x1>
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
     890:	09 95       	icall
	}
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	0f 92       	push	r0
     8bc:	11 24       	eor	r1, r1
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
     8d6:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <EXTI_voidCallBacks+0x2>
     8da:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <EXTI_voidCallBacks+0x3>
     8de:	30 97       	sbiw	r30, 0x00	; 0
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
     8e2:	09 95       	icall
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
     928:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <EXTI_voidCallBacks+0x4>
     92c:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <EXTI_voidCallBacks+0x5>
     930:	30 97       	sbiw	r30, 0x00	; 0
     932:	09 f0       	breq	.+2      	; 0x936 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
     934:	09 95       	icall
	}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
     97a:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <TIMER0_callBacks>
     97e:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <TIMER0_callBacks+0x1>
     982:	30 97       	sbiw	r30, 0x00	; 0
     984:	09 f0       	breq	.+2      	; 0x988 <__vector_11+0x30>
		TIMER0_callBacks[0]();
     986:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
     988:	88 b7       	in	r24, 0x38	; 56
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
     98e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <storedPreload>
     992:	82 bf       	out	0x32, r24	; 50
}
     994:	ff 91       	pop	r31
     996:	ef 91       	pop	r30
     998:	bf 91       	pop	r27
     99a:	af 91       	pop	r26
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	7f 91       	pop	r23
     9a2:	6f 91       	pop	r22
     9a4:	5f 91       	pop	r21
     9a6:	4f 91       	pop	r20
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
	if (isSoftwarePWMMode)
     9d8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <isSoftwarePWMMode>
     9dc:	88 23       	and	r24, r24
     9de:	f1 f0       	breq	.+60     	; 0xa1c <__vector_10+0x66>
	{
		SoftwarePWM_counter++;
     9e0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <SoftwarePWM_counter>
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
     9ea:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <SoftwarePWM_dutyCycle>
     9ee:	89 17       	cp	r24, r25
     9f0:	38 f0       	brcs	.+14     	; 0xa00 <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <SoftwarePWM_PORT>
     9f8:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <SoftwarePWM_PIN>
     9fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
     a00:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <SoftwarePWM_counter>
     a04:	84 36       	cpi	r24, 0x64	; 100
     a06:	88 f0       	brcs	.+34     	; 0xa2a <__vector_10+0x74>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <SoftwarePWM_PORT>
     a0e:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <SoftwarePWM_PIN>
     a12:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
     a16:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <SoftwarePWM_counter>
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__vector_10+0x74>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
     a1c:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <TIMER0_callBacks+0x2>
     a20:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <TIMER0_callBacks+0x3>
     a24:	30 97       	sbiw	r30, 0x00	; 0
     a26:	09 f0       	breq	.+2      	; 0xa2a <__vector_10+0x74>
			TIMER0_callBacks[1]();
     a28:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
     a2a:	88 b7       	in	r24, 0x38	; 56
     a2c:	82 60       	ori	r24, 0x02	; 2
     a2e:	88 bf       	out	0x38, r24	; 56
}
     a30:	ff 91       	pop	r31
     a32:	ef 91       	pop	r30
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <TIMER1_voidInit>:
	SET_BIT(TIMSK_REG,interrupt);
	SET_BIT(SREG_REG , 7);
}
void TIMER1_voidDisableInterrupt(enum TIMER1_Interrupt interrupt)
{
	CLR_BIT(TIFR_REG,interrupt);
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	1f bc       	out	0x2f, r1	; 47
     a5c:	1e bc       	out	0x2e, r1	; 46
     a5e:	1d bc       	out	0x2d, r1	; 45
     a60:	1c bc       	out	0x2c, r1	; 44
     a62:	1b bc       	out	0x2b, r1	; 43
     a64:	1a bc       	out	0x2a, r1	; 42
     a66:	19 bc       	out	0x29, r1	; 41
     a68:	18 bc       	out	0x28, r1	; 40
     a6a:	17 bc       	out	0x27, r1	; 39
     a6c:	16 bc       	out	0x26, r1	; 38
     a6e:	61 fb       	bst	r22, 1
     a70:	aa 27       	eor	r26, r26
     a72:	a0 f9       	bld	r26, 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	aa 0f       	add	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	90 e4       	ldi	r25, 0x40	; 64
     a7c:	49 9f       	mul	r20, r25
     a7e:	a0 01       	movw	r20, r0
     a80:	11 24       	eor	r1, r1
     a82:	90 e1       	ldi	r25, 0x10	; 16
     a84:	29 9f       	mul	r18, r25
     a86:	90 01       	movw	r18, r0
     a88:	11 24       	eor	r1, r1
     a8a:	96 2f       	mov	r25, r22
     a8c:	91 70       	andi	r25, 0x01	; 1
     a8e:	a9 2b       	or	r26, r25
     a90:	a4 2b       	or	r26, r20
     a92:	2a 2b       	or	r18, r26
     a94:	2f bd       	out	0x2f, r18	; 47
     a96:	62 fb       	bst	r22, 2
     a98:	99 27       	eor	r25, r25
     a9a:	90 f9       	bld	r25, 0
     a9c:	c9 2f       	mov	r28, r25
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	d9 2f       	mov	r29, r25
     aa2:	cc 0f       	add	r28, r28
     aa4:	dd 1f       	adc	r29, r29
     aa6:	cc 0f       	add	r28, r28
     aa8:	dd 1f       	adc	r29, r29
     aaa:	cc 0f       	add	r28, r28
     aac:	dd 1f       	adc	r29, r29
     aae:	63 fb       	bst	r22, 3
     ab0:	ee 27       	eor	r30, r30
     ab2:	e0 f9       	bld	r30, 0
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	e2 95       	swap	r30
     ab8:	f2 95       	swap	r31
     aba:	f0 7f       	andi	r31, 0xF0	; 240
     abc:	fe 27       	eor	r31, r30
     abe:	e0 7f       	andi	r30, 0xF0	; 240
     ac0:	fe 27       	eor	r31, r30
     ac2:	ec 2b       	or	r30, r28
     ac4:	e8 2b       	or	r30, r24
     ac6:	ee bd       	out	0x2e, r30	; 46
     ac8:	1d bd       	out	0x2d, r17	; 45
     aca:	0c bd       	out	0x2c, r16	; 44
     acc:	10 93 f6 00 	sts	0x00F6, r17	; 0x8000f6 <TIMER1_storedPreload+0x1>
     ad0:	00 93 f5 00 	sts	0x00F5, r16	; 0x8000f5 <TIMER1_storedPreload>
     ad4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <TIMER1_storedPrescalar>
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	08 95       	ret

00000ae2 <TIMER1_voidSetCounter>:
     ae2:	9d bd       	out	0x2d, r25	; 45
     ae4:	8c bd       	out	0x2c, r24	; 44
     ae6:	08 95       	ret

00000ae8 <TIMER1_voidStart>:
     ae8:	9e b5       	in	r25, 0x2e	; 46
     aea:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <TIMER1_storedPreload>
     aee:	89 2b       	or	r24, r25
     af0:	8e bd       	out	0x2e, r24	; 46
     af2:	08 95       	ret

00000af4 <TIMER1_voidStop>:
     af4:	8e b5       	in	r24, 0x2e	; 46
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	8e bd       	out	0x2e, r24	; 46
     afa:	8e b5       	in	r24, 0x2e	; 46
     afc:	8d 7f       	andi	r24, 0xFD	; 253
     afe:	8e bd       	out	0x2e, r24	; 46
     b00:	8e b5       	in	r24, 0x2e	; 46
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	8e bd       	out	0x2e, r24	; 46
     b06:	08 95       	ret

00000b08 <TIMER1_voidEnableInterrupt>:
     b08:	48 b7       	in	r20, 0x38	; 56
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	b9 01       	movw	r22, r18
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <TIMER1_voidEnableInterrupt+0xe>
     b12:	66 0f       	add	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	8a 95       	dec	r24
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <TIMER1_voidEnableInterrupt+0xa>
     b1a:	cb 01       	movw	r24, r22
     b1c:	46 2b       	or	r20, r22
     b1e:	48 bf       	out	0x38, r20	; 56
     b20:	99 b7       	in	r25, 0x39	; 57
     b22:	89 2b       	or	r24, r25
     b24:	89 bf       	out	0x39, r24	; 57
     b26:	8f b7       	in	r24, 0x3f	; 63
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	8f bf       	out	0x3f, r24	; 63
     b2c:	08 95       	ret

00000b2e <TIMER1_voidSetCallBack>:
};
void TIMER1_voidSetCallBack(enum TIMER1_Interrupt interrupt, void *callBack)
{
	if (interrupt < TIMER1_INTERRUPT_CAPTURE)
     b2e:	85 30       	cpi	r24, 0x05	; 5
     b30:	50 f4       	brcc	.+20     	; 0xb46 <TIMER1_voidSetCallBack+0x18>
	{
		TIMER1_callBacks[interrupt - 2] = (void (*)(void))callBack;
     b32:	e8 2f       	mov	r30, r24
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	32 97       	sbiw	r30, 0x02	; 2
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e5 50       	subi	r30, 0x05	; 5
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	71 83       	std	Z+1, r23	; 0x01
     b42:	60 83       	st	Z, r22
     b44:	08 95       	ret
	}else 
	{
		TIMER1_captureCallBack = (void (*)(u16))callBack;
     b46:	70 93 fa 00 	sts	0x00FA, r23	; 0x8000fa <TIMER1_captureCallBack+0x1>
     b4a:	60 93 f9 00 	sts	0x00F9, r22	; 0x8000f9 <TIMER1_captureCallBack>
     b4e:	08 95       	ret

00000b50 <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
     b72:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <TIMER1_callBacks+0x4>
     b76:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <TIMER1_callBacks+0x5>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_7+0x30>
	TIMER1_callBacks[2]();
     b7e:	09 95       	icall
}
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	2f 93       	push	r18
     bae:	3f 93       	push	r19
     bb0:	4f 93       	push	r20
     bb2:	5f 93       	push	r21
     bb4:	6f 93       	push	r22
     bb6:	7f 93       	push	r23
     bb8:	8f 93       	push	r24
     bba:	9f 93       	push	r25
     bbc:	af 93       	push	r26
     bbe:	bf 93       	push	r27
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
     bc4:	e0 91 fd 00 	lds	r30, 0x00FD	; 0x8000fd <TIMER1_callBacks+0x2>
     bc8:	f0 91 fe 00 	lds	r31, 0x00FE	; 0x8000fe <TIMER1_callBacks+0x3>
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__vector_8+0x30>
	TIMER1_callBacks[1]();
     bd0:	09 95       	icall
}
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0
     bf0:	1f 90       	pop	r1
     bf2:	18 95       	reti

00000bf4 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
     bf4:	1f 92       	push	r1
     bf6:	0f 92       	push	r0
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	0f 92       	push	r0
     bfc:	11 24       	eor	r1, r1
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	ef 93       	push	r30
     c14:	ff 93       	push	r31
	overflowCounter++;
     c16:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <overflowCounter>
     c1a:	8f 5f       	subi	r24, 0xFF	; 255
     c1c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
     c20:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <TIMER1_callBacks>
     c24:	f0 91 fc 00 	lds	r31, 0x00FC	; 0x8000fc <TIMER1_callBacks+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_9+0x3a>
		TIMER1_callBacks[0]();
     c2c:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
     c2e:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <TIMER1_storedPreload>
     c32:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <TIMER1_storedPreload+0x1>
     c36:	9d bd       	out	0x2d, r25	; 45
     c38:	8c bd       	out	0x2c, r24	; 44
}
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <UTILITY_generateRandomNumber>:
 *
 * Created: 9/14/2021 2:22:15 PM
 *  Author: Karim Essam
 */ 
#include "../LIB/STD_TYPES.h"
u8 UTILITY_generateRandomNumber(u8 lower , u8 upper){
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	d8 2f       	mov	r29, r24
     c62:	c6 2f       	mov	r28, r22
	return (rand() % (upper - lower + 1)) + lower;
     c64:	0e 94 1b 09 	call	0x1236	; 0x1236 <rand>
     c68:	6c 2f       	mov	r22, r28
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	6d 1b       	sub	r22, r29
     c6e:	71 09       	sbc	r23, r1
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	0e 94 a1 08 	call	0x1142	; 0x1142 <__divmodhi4>
}
     c78:	8d 0f       	add	r24, r29
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <UTILITY_f32ToString>:

void UTILITY_f32ToString(char* str, f32 d, u8 n)
{
     c80:	7f 92       	push	r7
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	6c 01       	movw	r12, r24
     c9c:	4a 01       	movw	r8, r20
     c9e:	5b 01       	movw	r10, r22
     ca0:	72 2e       	mov	r7, r18
	//For integer part conversion
	u16 t = 1;
     ca2:	01 e0       	ldi	r16, 0x01	; 1
     ca4:	10 e0       	ldi	r17, 0x00	; 0
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <UTILITY_f32ToString+0x3e>
	t *= 10;
     ca8:	c8 01       	movw	r24, r16
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	00 0f       	add	r16, r16
     cb0:	11 1f       	adc	r17, r17
     cb2:	00 0f       	add	r16, r16
     cb4:	11 1f       	adc	r17, r17
     cb6:	00 0f       	add	r16, r16
     cb8:	11 1f       	adc	r17, r17
     cba:	08 0f       	add	r16, r24
     cbc:	19 1f       	adc	r17, r25
{
	//For integer part conversion
	u16 t = 1;
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fixsfsi>
     cc6:	60 17       	cp	r22, r16
     cc8:	71 07       	cpc	r23, r17
     cca:	70 f7       	brcc	.-36     	; 0xca8 <UTILITY_f32ToString+0x28>
	t *= 10;
	temp = t/10;
     ccc:	98 01       	movw	r18, r16
     cce:	ad ec       	ldi	r26, 0xCD	; 205
     cd0:	bc ec       	ldi	r27, 0xCC	; 204
     cd2:	0e 94 b5 08 	call	0x116a	; 0x116a <__umulhisi3>
     cd6:	7c 01       	movw	r14, r24
     cd8:	f6 94       	lsr	r15
     cda:	e7 94       	ror	r14
     cdc:	f6 94       	lsr	r15
     cde:	e7 94       	ror	r14
     ce0:	f6 94       	lsr	r15
     ce2:	e7 94       	ror	r14
	for(i = 0; temp > 0; i++)
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
     ce8:	2f c0       	rjmp	.+94     	; 0xd48 <UTILITY_f32ToString+0xc8>
	{
		u16 digit = ((u16)d)/temp;
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 63 07 	call	0xec6	; 0xec6 <__fixunssfsi>
     cf2:	cb 01       	movw	r24, r22
     cf4:	b7 01       	movw	r22, r14
     cf6:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodhi4>
     cfa:	cb 01       	movw	r24, r22
		str[i] = digit + '0';
     cfc:	f6 01       	movw	r30, r12
     cfe:	ec 0f       	add	r30, r28
     d00:	fd 1f       	adc	r31, r29
     d02:	20 e3       	ldi	r18, 0x30	; 48
     d04:	26 0f       	add	r18, r22
     d06:	20 83       	st	Z, r18
		d = d - (double)(digit*temp);
     d08:	e8 9e       	mul	r14, r24
     d0a:	b0 01       	movw	r22, r0
     d0c:	e9 9e       	mul	r14, r25
     d0e:	70 0d       	add	r23, r0
     d10:	f8 9e       	mul	r15, r24
     d12:	70 0d       	add	r23, r0
     d14:	11 24       	eor	r1, r1
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 92 07 	call	0xf24	; 0xf24 <__floatunsisf>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
     d2a:	4b 01       	movw	r8, r22
     d2c:	5c 01       	movw	r10, r24
		temp /= 10;
     d2e:	97 01       	movw	r18, r14
     d30:	ad ec       	ldi	r26, 0xCD	; 205
     d32:	bc ec       	ldi	r27, 0xCC	; 204
     d34:	0e 94 b5 08 	call	0x116a	; 0x116a <__umulhisi3>
     d38:	7c 01       	movw	r14, r24
     d3a:	f6 94       	lsr	r15
     d3c:	e7 94       	ror	r14
     d3e:	f6 94       	lsr	r15
     d40:	e7 94       	ror	r14
     d42:	f6 94       	lsr	r15
     d44:	e7 94       	ror	r14
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
	t *= 10;
	temp = t/10;
	for(i = 0; temp > 0; i++)
     d46:	21 96       	adiw	r28, 0x01	; 1
     d48:	e1 14       	cp	r14, r1
     d4a:	f1 04       	cpc	r15, r1
     d4c:	71 f6       	brne	.-100    	; 0xcea <UTILITY_f32ToString+0x6a>
		u16 digit = ((u16)d)/temp;
		str[i] = digit + '0';
		d = d - (double)(digit*temp);
		temp /= 10;
	}
	if(t==1)
     d4e:	01 30       	cpi	r16, 0x01	; 1
     d50:	11 05       	cpc	r17, r1
     d52:	31 f4       	brne	.+12     	; 0xd60 <UTILITY_f32ToString+0xe0>
		str[i++] = '0';
     d54:	f6 01       	movw	r30, r12
     d56:	ec 0f       	add	r30, r28
     d58:	fd 1f       	adc	r31, r29
     d5a:	80 e3       	ldi	r24, 0x30	; 48
     d5c:	80 83       	st	Z, r24
     d5e:	21 96       	adiw	r28, 0x01	; 1
	//Add decimal point
	if (n != 0)
     d60:	77 20       	and	r7, r7
     d62:	51 f1       	breq	.+84     	; 0xdb8 <UTILITY_f32ToString+0x138>
		str[i++] = '.';
     d64:	f6 01       	movw	r30, r12
     d66:	ec 0f       	add	r30, r28
     d68:	fd 1f       	adc	r31, r29
     d6a:	8e e2       	ldi	r24, 0x2E	; 46
     d6c:	80 83       	st	Z, r24
     d6e:	21 96       	adiw	r28, 0x01	; 1
     d70:	23 c0       	rjmp	.+70     	; 0xdb8 <UTILITY_f32ToString+0x138>

	//For after decimal point conversion
	for(; n > 0; n--)
	{
		d = d*10;
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	c5 01       	movw	r24, r10
     d7c:	b4 01       	movw	r22, r8
     d7e:	0e 94 20 08 	call	0x1040	; 0x1040 <__mulsf3>
     d82:	4b 01       	movw	r8, r22
     d84:	5c 01       	movw	r10, r24
		str[i++] = (u8)d + '0';
     d86:	8e 01       	movw	r16, r28
     d88:	0f 5f       	subi	r16, 0xFF	; 255
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	cc 0d       	add	r28, r12
     d8e:	dd 1d       	adc	r29, r13
     d90:	0e 94 63 07 	call	0xec6	; 0xec6 <__fixunssfsi>
     d94:	80 e3       	ldi	r24, 0x30	; 48
     d96:	86 0f       	add	r24, r22
     d98:	88 83       	st	Y, r24
		d -= (u8)d;
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatsisf>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c5 01       	movw	r24, r10
     daa:	b4 01       	movw	r22, r8
     dac:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
     db0:	4b 01       	movw	r8, r22
     db2:	5c 01       	movw	r10, r24
	//Add decimal point
	if (n != 0)
		str[i++] = '.';

	//For after decimal point conversion
	for(; n > 0; n--)
     db4:	7a 94       	dec	r7
	{
		d = d*10;
		str[i++] = (u8)d + '0';
     db6:	e8 01       	movw	r28, r16
	//Add decimal point
	if (n != 0)
		str[i++] = '.';

	//For after decimal point conversion
	for(; n > 0; n--)
     db8:	71 10       	cpse	r7, r1
     dba:	db cf       	rjmp	.-74     	; 0xd72 <UTILITY_f32ToString+0xf2>
		str[i++] = (u8)d + '0';
		d -= (u8)d;
	}

	//Null end
	str[i] = 0;
     dbc:	cc 0d       	add	r28, r12
     dbe:	dd 1d       	adc	r29, r13
     dc0:	18 82       	st	Y, r1
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	bf 90       	pop	r11
     dd4:	af 90       	pop	r10
     dd6:	9f 90       	pop	r9
     dd8:	8f 90       	pop	r8
     dda:	7f 90       	pop	r7
     ddc:	08 95       	ret

00000dde <__subsf3>:
     dde:	50 58       	subi	r21, 0x80	; 128

00000de0 <__addsf3>:
     de0:	bb 27       	eor	r27, r27
     de2:	aa 27       	eor	r26, r26
     de4:	0e 94 07 07 	call	0xe0e	; 0xe0e <__addsf3x>
     de8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_round>
     dec:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_pscA>
     df0:	38 f0       	brcs	.+14     	; 0xe00 <__addsf3+0x20>
     df2:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscB>
     df6:	20 f0       	brcs	.+8      	; 0xe00 <__addsf3+0x20>
     df8:	39 f4       	brne	.+14     	; 0xe08 <__addsf3+0x28>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__addsf3+0x24>
     dfe:	26 f4       	brtc	.+8      	; 0xe08 <__addsf3+0x28>
     e00:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__fp_nan>
     e04:	0e f4       	brtc	.+2      	; 0xe08 <__addsf3+0x28>
     e06:	e0 95       	com	r30
     e08:	e7 fb       	bst	r30, 7
     e0a:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_inf>

00000e0e <__addsf3x>:
     e0e:	e9 2f       	mov	r30, r25
     e10:	0e 94 f7 07 	call	0xfee	; 0xfee <__fp_split3>
     e14:	58 f3       	brcs	.-42     	; 0xdec <__addsf3+0xc>
     e16:	ba 17       	cp	r27, r26
     e18:	62 07       	cpc	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	95 07       	cpc	r25, r21
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__addsf3x+0x1c>
     e22:	79 f4       	brne	.+30     	; 0xe42 <__addsf3x+0x34>
     e24:	a6 f5       	brtc	.+104    	; 0xe8e <__addsf3x+0x80>
     e26:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_zero>
     e2a:	0e f4       	brtc	.+2      	; 0xe2e <__addsf3x+0x20>
     e2c:	e0 95       	com	r30
     e2e:	0b 2e       	mov	r0, r27
     e30:	ba 2f       	mov	r27, r26
     e32:	a0 2d       	mov	r26, r0
     e34:	0b 01       	movw	r0, r22
     e36:	b9 01       	movw	r22, r18
     e38:	90 01       	movw	r18, r0
     e3a:	0c 01       	movw	r0, r24
     e3c:	ca 01       	movw	r24, r20
     e3e:	a0 01       	movw	r20, r0
     e40:	11 24       	eor	r1, r1
     e42:	ff 27       	eor	r31, r31
     e44:	59 1b       	sub	r21, r25
     e46:	99 f0       	breq	.+38     	; 0xe6e <__addsf3x+0x60>
     e48:	59 3f       	cpi	r21, 0xF9	; 249
     e4a:	50 f4       	brcc	.+20     	; 0xe60 <__addsf3x+0x52>
     e4c:	50 3e       	cpi	r21, 0xE0	; 224
     e4e:	68 f1       	brcs	.+90     	; 0xeaa <__addsf3x+0x9c>
     e50:	1a 16       	cp	r1, r26
     e52:	f0 40       	sbci	r31, 0x00	; 0
     e54:	a2 2f       	mov	r26, r18
     e56:	23 2f       	mov	r18, r19
     e58:	34 2f       	mov	r19, r20
     e5a:	44 27       	eor	r20, r20
     e5c:	58 5f       	subi	r21, 0xF8	; 248
     e5e:	f3 cf       	rjmp	.-26     	; 0xe46 <__addsf3x+0x38>
     e60:	46 95       	lsr	r20
     e62:	37 95       	ror	r19
     e64:	27 95       	ror	r18
     e66:	a7 95       	ror	r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	53 95       	inc	r21
     e6c:	c9 f7       	brne	.-14     	; 0xe60 <__addsf3x+0x52>
     e6e:	7e f4       	brtc	.+30     	; 0xe8e <__addsf3x+0x80>
     e70:	1f 16       	cp	r1, r31
     e72:	ba 0b       	sbc	r27, r26
     e74:	62 0b       	sbc	r22, r18
     e76:	73 0b       	sbc	r23, r19
     e78:	84 0b       	sbc	r24, r20
     e7a:	ba f0       	brmi	.+46     	; 0xeaa <__addsf3x+0x9c>
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	a1 f0       	breq	.+40     	; 0xea8 <__addsf3x+0x9a>
     e80:	ff 0f       	add	r31, r31
     e82:	bb 1f       	adc	r27, r27
     e84:	66 1f       	adc	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	c2 f7       	brpl	.-16     	; 0xe7c <__addsf3x+0x6e>
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <__addsf3x+0x9c>
     e8e:	ba 0f       	add	r27, r26
     e90:	62 1f       	adc	r22, r18
     e92:	73 1f       	adc	r23, r19
     e94:	84 1f       	adc	r24, r20
     e96:	48 f4       	brcc	.+18     	; 0xeaa <__addsf3x+0x9c>
     e98:	87 95       	ror	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	b7 95       	ror	r27
     ea0:	f7 95       	ror	r31
     ea2:	9e 3f       	cpi	r25, 0xFE	; 254
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__addsf3x+0x9a>
     ea6:	b0 cf       	rjmp	.-160    	; 0xe08 <__addsf3+0x28>
     ea8:	93 95       	inc	r25
     eaa:	88 0f       	add	r24, r24
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <__addsf3x+0xa2>
     eae:	99 27       	eor	r25, r25
     eb0:	ee 0f       	add	r30, r30
     eb2:	97 95       	ror	r25
     eb4:	87 95       	ror	r24
     eb6:	08 95       	ret

00000eb8 <__fixsfsi>:
     eb8:	0e 94 63 07 	call	0xec6	; 0xec6 <__fixunssfsi>
     ebc:	68 94       	set
     ebe:	b1 11       	cpse	r27, r1
     ec0:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>
     ec4:	08 95       	ret

00000ec6 <__fixunssfsi>:
     ec6:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_splitA>
     eca:	88 f0       	brcs	.+34     	; 0xeee <__fixunssfsi+0x28>
     ecc:	9f 57       	subi	r25, 0x7F	; 127
     ece:	98 f0       	brcs	.+38     	; 0xef6 <__fixunssfsi+0x30>
     ed0:	b9 2f       	mov	r27, r25
     ed2:	99 27       	eor	r25, r25
     ed4:	b7 51       	subi	r27, 0x17	; 23
     ed6:	b0 f0       	brcs	.+44     	; 0xf04 <__fixunssfsi+0x3e>
     ed8:	e1 f0       	breq	.+56     	; 0xf12 <__fixunssfsi+0x4c>
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	88 1f       	adc	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	1a f0       	brmi	.+6      	; 0xeea <__fixunssfsi+0x24>
     ee4:	ba 95       	dec	r27
     ee6:	c9 f7       	brne	.-14     	; 0xeda <__fixunssfsi+0x14>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <__fixunssfsi+0x4c>
     eea:	b1 30       	cpi	r27, 0x01	; 1
     eec:	91 f0       	breq	.+36     	; 0xf12 <__fixunssfsi+0x4c>
     eee:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_zero>
     ef2:	b1 e0       	ldi	r27, 0x01	; 1
     ef4:	08 95       	ret
     ef6:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_zero>
     efa:	67 2f       	mov	r22, r23
     efc:	78 2f       	mov	r23, r24
     efe:	88 27       	eor	r24, r24
     f00:	b8 5f       	subi	r27, 0xF8	; 248
     f02:	39 f0       	breq	.+14     	; 0xf12 <__fixunssfsi+0x4c>
     f04:	b9 3f       	cpi	r27, 0xF9	; 249
     f06:	cc f3       	brlt	.-14     	; 0xefa <__fixunssfsi+0x34>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b3 95       	inc	r27
     f10:	d9 f7       	brne	.-10     	; 0xf08 <__fixunssfsi+0x42>
     f12:	3e f4       	brtc	.+14     	; 0xf22 <__fixunssfsi+0x5c>
     f14:	90 95       	com	r25
     f16:	80 95       	com	r24
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	08 95       	ret

00000f24 <__floatunsisf>:
     f24:	e8 94       	clt
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <__floatsisf+0x12>

00000f28 <__floatsisf>:
     f28:	97 fb       	bst	r25, 7
     f2a:	3e f4       	brtc	.+14     	; 0xf3a <__floatsisf+0x12>
     f2c:	90 95       	com	r25
     f2e:	80 95       	com	r24
     f30:	70 95       	com	r23
     f32:	61 95       	neg	r22
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	99 23       	and	r25, r25
     f3c:	a9 f0       	breq	.+42     	; 0xf68 <__floatsisf+0x40>
     f3e:	f9 2f       	mov	r31, r25
     f40:	96 e9       	ldi	r25, 0x96	; 150
     f42:	bb 27       	eor	r27, r27
     f44:	93 95       	inc	r25
     f46:	f6 95       	lsr	r31
     f48:	87 95       	ror	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f1 11       	cpse	r31, r1
     f52:	f8 cf       	rjmp	.-16     	; 0xf44 <__floatsisf+0x1c>
     f54:	fa f4       	brpl	.+62     	; 0xf94 <__floatsisf+0x6c>
     f56:	bb 0f       	add	r27, r27
     f58:	11 f4       	brne	.+4      	; 0xf5e <__floatsisf+0x36>
     f5a:	60 ff       	sbrs	r22, 0
     f5c:	1b c0       	rjmp	.+54     	; 0xf94 <__floatsisf+0x6c>
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	16 c0       	rjmp	.+44     	; 0xf94 <__floatsisf+0x6c>
     f68:	88 23       	and	r24, r24
     f6a:	11 f0       	breq	.+4      	; 0xf70 <__floatsisf+0x48>
     f6c:	96 e9       	ldi	r25, 0x96	; 150
     f6e:	11 c0       	rjmp	.+34     	; 0xf92 <__floatsisf+0x6a>
     f70:	77 23       	and	r23, r23
     f72:	21 f0       	breq	.+8      	; 0xf7c <__floatsisf+0x54>
     f74:	9e e8       	ldi	r25, 0x8E	; 142
     f76:	87 2f       	mov	r24, r23
     f78:	76 2f       	mov	r23, r22
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <__floatsisf+0x5e>
     f7c:	66 23       	and	r22, r22
     f7e:	71 f0       	breq	.+28     	; 0xf9c <__floatsisf+0x74>
     f80:	96 e8       	ldi	r25, 0x86	; 134
     f82:	86 2f       	mov	r24, r22
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	2a f0       	brmi	.+10     	; 0xf94 <__floatsisf+0x6c>
     f8a:	9a 95       	dec	r25
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	da f7       	brpl	.-10     	; 0xf8a <__floatsisf+0x62>
     f94:	88 0f       	add	r24, r24
     f96:	96 95       	lsr	r25
     f98:	87 95       	ror	r24
     f9a:	97 f9       	bld	r25, 7
     f9c:	08 95       	ret

00000f9e <__fp_inf>:
     f9e:	97 f9       	bld	r25, 7
     fa0:	9f 67       	ori	r25, 0x7F	; 127
     fa2:	80 e8       	ldi	r24, 0x80	; 128
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	08 95       	ret

00000faa <__fp_nan>:
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	80 ec       	ldi	r24, 0xC0	; 192
     fae:	08 95       	ret

00000fb0 <__fp_pscA>:
     fb0:	00 24       	eor	r0, r0
     fb2:	0a 94       	dec	r0
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	09 06       	cpc	r0, r25
     fbc:	08 95       	ret

00000fbe <__fp_pscB>:
     fbe:	00 24       	eor	r0, r0
     fc0:	0a 94       	dec	r0
     fc2:	12 16       	cp	r1, r18
     fc4:	13 06       	cpc	r1, r19
     fc6:	14 06       	cpc	r1, r20
     fc8:	05 06       	cpc	r0, r21
     fca:	08 95       	ret

00000fcc <__fp_round>:
     fcc:	09 2e       	mov	r0, r25
     fce:	03 94       	inc	r0
     fd0:	00 0c       	add	r0, r0
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__fp_round+0xc>
     fd4:	88 23       	and	r24, r24
     fd6:	52 f0       	brmi	.+20     	; 0xfec <__fp_round+0x20>
     fd8:	bb 0f       	add	r27, r27
     fda:	40 f4       	brcc	.+16     	; 0xfec <__fp_round+0x20>
     fdc:	bf 2b       	or	r27, r31
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__fp_round+0x18>
     fe0:	60 ff       	sbrs	r22, 0
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__fp_round+0x20>
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	08 95       	ret

00000fee <__fp_split3>:
     fee:	57 fd       	sbrc	r21, 7
     ff0:	90 58       	subi	r25, 0x80	; 128
     ff2:	44 0f       	add	r20, r20
     ff4:	55 1f       	adc	r21, r21
     ff6:	59 f0       	breq	.+22     	; 0x100e <__fp_splitA+0x10>
     ff8:	5f 3f       	cpi	r21, 0xFF	; 255
     ffa:	71 f0       	breq	.+28     	; 0x1018 <__fp_splitA+0x1a>
     ffc:	47 95       	ror	r20

00000ffe <__fp_splitA>:
     ffe:	88 0f       	add	r24, r24
    1000:	97 fb       	bst	r25, 7
    1002:	99 1f       	adc	r25, r25
    1004:	61 f0       	breq	.+24     	; 0x101e <__fp_splitA+0x20>
    1006:	9f 3f       	cpi	r25, 0xFF	; 255
    1008:	79 f0       	breq	.+30     	; 0x1028 <__fp_splitA+0x2a>
    100a:	87 95       	ror	r24
    100c:	08 95       	ret
    100e:	12 16       	cp	r1, r18
    1010:	13 06       	cpc	r1, r19
    1012:	14 06       	cpc	r1, r20
    1014:	55 1f       	adc	r21, r21
    1016:	f2 cf       	rjmp	.-28     	; 0xffc <__fp_split3+0xe>
    1018:	46 95       	lsr	r20
    101a:	f1 df       	rcall	.-30     	; 0xffe <__fp_splitA>
    101c:	08 c0       	rjmp	.+16     	; 0x102e <__fp_splitA+0x30>
    101e:	16 16       	cp	r1, r22
    1020:	17 06       	cpc	r1, r23
    1022:	18 06       	cpc	r1, r24
    1024:	99 1f       	adc	r25, r25
    1026:	f1 cf       	rjmp	.-30     	; 0x100a <__fp_splitA+0xc>
    1028:	86 95       	lsr	r24
    102a:	71 05       	cpc	r23, r1
    102c:	61 05       	cpc	r22, r1
    102e:	08 94       	sec
    1030:	08 95       	ret

00001032 <__fp_zero>:
    1032:	e8 94       	clt

00001034 <__fp_szero>:
    1034:	bb 27       	eor	r27, r27
    1036:	66 27       	eor	r22, r22
    1038:	77 27       	eor	r23, r23
    103a:	cb 01       	movw	r24, r22
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <__mulsf3>:
    1040:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3x>
    1044:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_round>
    1048:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_pscA>
    104c:	38 f0       	brcs	.+14     	; 0x105c <__mulsf3+0x1c>
    104e:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscB>
    1052:	20 f0       	brcs	.+8      	; 0x105c <__mulsf3+0x1c>
    1054:	95 23       	and	r25, r21
    1056:	11 f0       	breq	.+4      	; 0x105c <__mulsf3+0x1c>
    1058:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_inf>
    105c:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__fp_nan>
    1060:	11 24       	eor	r1, r1
    1062:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>

00001066 <__mulsf3x>:
    1066:	0e 94 f7 07 	call	0xfee	; 0xfee <__fp_split3>
    106a:	70 f3       	brcs	.-36     	; 0x1048 <__mulsf3+0x8>

0000106c <__mulsf3_pse>:
    106c:	95 9f       	mul	r25, r21
    106e:	c1 f3       	breq	.-16     	; 0x1060 <__mulsf3+0x20>
    1070:	95 0f       	add	r25, r21
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	55 1f       	adc	r21, r21
    1076:	62 9f       	mul	r22, r18
    1078:	f0 01       	movw	r30, r0
    107a:	72 9f       	mul	r23, r18
    107c:	bb 27       	eor	r27, r27
    107e:	f0 0d       	add	r31, r0
    1080:	b1 1d       	adc	r27, r1
    1082:	63 9f       	mul	r22, r19
    1084:	aa 27       	eor	r26, r26
    1086:	f0 0d       	add	r31, r0
    1088:	b1 1d       	adc	r27, r1
    108a:	aa 1f       	adc	r26, r26
    108c:	64 9f       	mul	r22, r20
    108e:	66 27       	eor	r22, r22
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	66 1f       	adc	r22, r22
    1096:	82 9f       	mul	r24, r18
    1098:	22 27       	eor	r18, r18
    109a:	b0 0d       	add	r27, r0
    109c:	a1 1d       	adc	r26, r1
    109e:	62 1f       	adc	r22, r18
    10a0:	73 9f       	mul	r23, r19
    10a2:	b0 0d       	add	r27, r0
    10a4:	a1 1d       	adc	r26, r1
    10a6:	62 1f       	adc	r22, r18
    10a8:	83 9f       	mul	r24, r19
    10aa:	a0 0d       	add	r26, r0
    10ac:	61 1d       	adc	r22, r1
    10ae:	22 1f       	adc	r18, r18
    10b0:	74 9f       	mul	r23, r20
    10b2:	33 27       	eor	r19, r19
    10b4:	a0 0d       	add	r26, r0
    10b6:	61 1d       	adc	r22, r1
    10b8:	23 1f       	adc	r18, r19
    10ba:	84 9f       	mul	r24, r20
    10bc:	60 0d       	add	r22, r0
    10be:	21 1d       	adc	r18, r1
    10c0:	82 2f       	mov	r24, r18
    10c2:	76 2f       	mov	r23, r22
    10c4:	6a 2f       	mov	r22, r26
    10c6:	11 24       	eor	r1, r1
    10c8:	9f 57       	subi	r25, 0x7F	; 127
    10ca:	50 40       	sbci	r21, 0x00	; 0
    10cc:	9a f0       	brmi	.+38     	; 0x10f4 <__mulsf3_pse+0x88>
    10ce:	f1 f0       	breq	.+60     	; 0x110c <__mulsf3_pse+0xa0>
    10d0:	88 23       	and	r24, r24
    10d2:	4a f0       	brmi	.+18     	; 0x10e6 <__mulsf3_pse+0x7a>
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	bb 1f       	adc	r27, r27
    10da:	66 1f       	adc	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	50 40       	sbci	r21, 0x00	; 0
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__mulsf3_pse+0x64>
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	51 05       	cpc	r21, r1
    10ea:	80 f0       	brcs	.+32     	; 0x110c <__mulsf3_pse+0xa0>
    10ec:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_inf>
    10f0:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>
    10f4:	5f 3f       	cpi	r21, 0xFF	; 255
    10f6:	e4 f3       	brlt	.-8      	; 0x10f0 <__mulsf3_pse+0x84>
    10f8:	98 3e       	cpi	r25, 0xE8	; 232
    10fa:	d4 f3       	brlt	.-12     	; 0x10f0 <__mulsf3_pse+0x84>
    10fc:	86 95       	lsr	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	b7 95       	ror	r27
    1104:	f7 95       	ror	r31
    1106:	e7 95       	ror	r30
    1108:	9f 5f       	subi	r25, 0xFF	; 255
    110a:	c1 f7       	brne	.-16     	; 0x10fc <__mulsf3_pse+0x90>
    110c:	fe 2b       	or	r31, r30
    110e:	88 0f       	add	r24, r24
    1110:	91 1d       	adc	r25, r1
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	97 f9       	bld	r25, 7
    1118:	08 95       	ret

0000111a <__udivmodhi4>:
    111a:	aa 1b       	sub	r26, r26
    111c:	bb 1b       	sub	r27, r27
    111e:	51 e1       	ldi	r21, 0x11	; 17
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <__udivmodhi4_ep>

00001122 <__udivmodhi4_loop>:
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	a6 17       	cp	r26, r22
    1128:	b7 07       	cpc	r27, r23
    112a:	10 f0       	brcs	.+4      	; 0x1130 <__udivmodhi4_ep>
    112c:	a6 1b       	sub	r26, r22
    112e:	b7 0b       	sbc	r27, r23

00001130 <__udivmodhi4_ep>:
    1130:	88 1f       	adc	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	5a 95       	dec	r21
    1136:	a9 f7       	brne	.-22     	; 0x1122 <__udivmodhi4_loop>
    1138:	80 95       	com	r24
    113a:	90 95       	com	r25
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	08 95       	ret

00001142 <__divmodhi4>:
    1142:	97 fb       	bst	r25, 7
    1144:	07 2e       	mov	r0, r23
    1146:	16 f4       	brtc	.+4      	; 0x114c <__divmodhi4+0xa>
    1148:	00 94       	com	r0
    114a:	07 d0       	rcall	.+14     	; 0x115a <__divmodhi4_neg1>
    114c:	77 fd       	sbrc	r23, 7
    114e:	09 d0       	rcall	.+18     	; 0x1162 <__divmodhi4_neg2>
    1150:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodhi4>
    1154:	07 fc       	sbrc	r0, 7
    1156:	05 d0       	rcall	.+10     	; 0x1162 <__divmodhi4_neg2>
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__divmodhi4_exit>

0000115a <__divmodhi4_neg1>:
    115a:	90 95       	com	r25
    115c:	81 95       	neg	r24
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	08 95       	ret

00001162 <__divmodhi4_neg2>:
    1162:	70 95       	com	r23
    1164:	61 95       	neg	r22
    1166:	7f 4f       	sbci	r23, 0xFF	; 255

00001168 <__divmodhi4_exit>:
    1168:	08 95       	ret

0000116a <__umulhisi3>:
    116a:	a2 9f       	mul	r26, r18
    116c:	b0 01       	movw	r22, r0
    116e:	b3 9f       	mul	r27, r19
    1170:	c0 01       	movw	r24, r0
    1172:	a3 9f       	mul	r26, r19
    1174:	70 0d       	add	r23, r0
    1176:	81 1d       	adc	r24, r1
    1178:	11 24       	eor	r1, r1
    117a:	91 1d       	adc	r25, r1
    117c:	b2 9f       	mul	r27, r18
    117e:	70 0d       	add	r23, r0
    1180:	81 1d       	adc	r24, r1
    1182:	11 24       	eor	r1, r1
    1184:	91 1d       	adc	r25, r1
    1186:	08 95       	ret

00001188 <__muluhisi3>:
    1188:	0e 94 b5 08 	call	0x116a	; 0x116a <__umulhisi3>
    118c:	a5 9f       	mul	r26, r21
    118e:	90 0d       	add	r25, r0
    1190:	b4 9f       	mul	r27, r20
    1192:	90 0d       	add	r25, r0
    1194:	a4 9f       	mul	r26, r20
    1196:	80 0d       	add	r24, r0
    1198:	91 1d       	adc	r25, r1
    119a:	11 24       	eor	r1, r1
    119c:	08 95       	ret

0000119e <do_rand>:
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	ec 01       	movw	r28, r24
    11b4:	68 81       	ld	r22, Y
    11b6:	79 81       	ldd	r23, Y+1	; 0x01
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	61 15       	cp	r22, r1
    11be:	71 05       	cpc	r23, r1
    11c0:	81 05       	cpc	r24, r1
    11c2:	91 05       	cpc	r25, r1
    11c4:	21 f4       	brne	.+8      	; 0x11ce <do_rand+0x30>
    11c6:	64 e2       	ldi	r22, 0x24	; 36
    11c8:	79 ed       	ldi	r23, 0xD9	; 217
    11ca:	8b e5       	ldi	r24, 0x5B	; 91
    11cc:	97 e0       	ldi	r25, 0x07	; 7
    11ce:	2d e1       	ldi	r18, 0x1D	; 29
    11d0:	33 ef       	ldi	r19, 0xF3	; 243
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodsi4>
    11da:	49 01       	movw	r8, r18
    11dc:	5a 01       	movw	r10, r20
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	a7 ea       	ldi	r26, 0xA7	; 167
    11e4:	b1 e4       	ldi	r27, 0x41	; 65
    11e6:	0e 94 c4 08 	call	0x1188	; 0x1188 <__muluhisi3>
    11ea:	6b 01       	movw	r12, r22
    11ec:	7c 01       	movw	r14, r24
    11ee:	ac ee       	ldi	r26, 0xEC	; 236
    11f0:	b4 ef       	ldi	r27, 0xF4	; 244
    11f2:	a5 01       	movw	r20, r10
    11f4:	94 01       	movw	r18, r8
    11f6:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulohisi3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8c 0d       	add	r24, r12
    1200:	9d 1d       	adc	r25, r13
    1202:	ae 1d       	adc	r26, r14
    1204:	bf 1d       	adc	r27, r15
    1206:	b7 ff       	sbrs	r27, 7
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <do_rand+0x72>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	a1 09       	sbc	r26, r1
    120e:	b0 48       	sbci	r27, 0x80	; 128
    1210:	88 83       	st	Y, r24
    1212:	99 83       	std	Y+1, r25	; 0x01
    1214:	aa 83       	std	Y+2, r26	; 0x02
    1216:	bb 83       	std	Y+3, r27	; 0x03
    1218:	9f 77       	andi	r25, 0x7F	; 127
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	08 95       	ret

00001230 <rand_r>:
    1230:	0e 94 cf 08 	call	0x119e	; 0x119e <do_rand>
    1234:	08 95       	ret

00001236 <rand>:
    1236:	80 e6       	ldi	r24, 0x60	; 96
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 cf 08 	call	0x119e	; 0x119e <do_rand>
    123e:	08 95       	ret

00001240 <srand>:
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1248:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    124c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1250:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1254:	08 95       	ret

00001256 <__divmodsi4>:
    1256:	05 2e       	mov	r0, r21
    1258:	97 fb       	bst	r25, 7
    125a:	1e f4       	brtc	.+6      	; 0x1262 <__divmodsi4+0xc>
    125c:	00 94       	com	r0
    125e:	0e 94 42 09 	call	0x1284	; 0x1284 <__negsi2>
    1262:	57 fd       	sbrc	r21, 7
    1264:	07 d0       	rcall	.+14     	; 0x1274 <__divmodsi4_neg2>
    1266:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmodsi4>
    126a:	07 fc       	sbrc	r0, 7
    126c:	03 d0       	rcall	.+6      	; 0x1274 <__divmodsi4_neg2>
    126e:	4e f4       	brtc	.+18     	; 0x1282 <__divmodsi4_exit>
    1270:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__negsi2>

00001274 <__divmodsi4_neg2>:
    1274:	50 95       	com	r21
    1276:	40 95       	com	r20
    1278:	30 95       	com	r19
    127a:	21 95       	neg	r18
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	4f 4f       	sbci	r20, 0xFF	; 255
    1280:	5f 4f       	sbci	r21, 0xFF	; 255

00001282 <__divmodsi4_exit>:
    1282:	08 95       	ret

00001284 <__negsi2>:
    1284:	90 95       	com	r25
    1286:	80 95       	com	r24
    1288:	70 95       	com	r23
    128a:	61 95       	neg	r22
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__mulshisi3>:
    1294:	b7 ff       	sbrs	r27, 7
    1296:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__muluhisi3>

0000129a <__mulohisi3>:
    129a:	0e 94 c4 08 	call	0x1188	; 0x1188 <__muluhisi3>
    129e:	82 1b       	sub	r24, r18
    12a0:	93 0b       	sbc	r25, r19
    12a2:	08 95       	ret

000012a4 <__udivmodsi4>:
    12a4:	a1 e2       	ldi	r26, 0x21	; 33
    12a6:	1a 2e       	mov	r1, r26
    12a8:	aa 1b       	sub	r26, r26
    12aa:	bb 1b       	sub	r27, r27
    12ac:	fd 01       	movw	r30, r26
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <__udivmodsi4_ep>

000012b0 <__udivmodsi4_loop>:
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	ee 1f       	adc	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	a2 17       	cp	r26, r18
    12ba:	b3 07       	cpc	r27, r19
    12bc:	e4 07       	cpc	r30, r20
    12be:	f5 07       	cpc	r31, r21
    12c0:	20 f0       	brcs	.+8      	; 0x12ca <__udivmodsi4_ep>
    12c2:	a2 1b       	sub	r26, r18
    12c4:	b3 0b       	sbc	r27, r19
    12c6:	e4 0b       	sbc	r30, r20
    12c8:	f5 0b       	sbc	r31, r21

000012ca <__udivmodsi4_ep>:
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	1a 94       	dec	r1
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <__udivmodsi4_loop>
    12d6:	60 95       	com	r22
    12d8:	70 95       	com	r23
    12da:	80 95       	com	r24
    12dc:	90 95       	com	r25
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	bd 01       	movw	r22, r26
    12e4:	cf 01       	movw	r24, r30
    12e6:	08 95       	ret

000012e8 <_exit>:
    12e8:	f8 94       	cli

000012ea <__stop_program>:
    12ea:	ff cf       	rjmp	.-2      	; 0x12ea <__stop_program>
